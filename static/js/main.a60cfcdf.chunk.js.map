{"version":3,"sources":["actionReducers.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","action.js","actionTypes.js","serviceWorker.js","index.js"],"names":["initialStateSearch","searchField","initialStateRobots","isPending","robots","error","Card","id","name","email","className","src","alt","CardList","map","robot","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","info","this","setState","Component","App","onRequestRobot","searchHandler","filteredRobots","filter","toLowerCase","includes","React","connect","search","dispatch","e","payload","target","value","fetch","then","res","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunk","logger","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.a60cfcdf.chunk.js","sourcesContent":["import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOT_START,\r\n    REQUEST_ROBOT_SUCCESS,\r\n    REQUEST_ROBOT_FAIL\r\n} from './actionTypes';\r\n\r\nconst initialStateSearch = {\r\n    searchField: ''\r\n}\r\n\r\nexport const searchRobot = (state = initialStateSearch,  action) =>{\r\n    switch(action.type){\r\n        case CHANGE_SEARCH_FIELD:\r\n            return {...state, searchField: action.payload}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n}\r\n\r\nexport const requestRobotReducer = (state = initialStateRobots, action) =>{\r\n    switch(action.type){\r\n        case REQUEST_ROBOT_START:\r\n            return {...state, isPending: true}\r\n        case REQUEST_ROBOT_SUCCESS:\r\n            return {...state, isPending: false, robots: action.payload}\r\n        case REQUEST_ROBOT_FAIL:\r\n            return {...state, isPending: false, error: action.payload};\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\n\nconst Card = ({ id, name, email }) => {\n  return (\n    <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n      <img src={`https://robohash.org/${id}?200x200`} alt=\"img\" />\n      <div>\n        <h1>{name}</h1>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Card;\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n    return (\r\n        <div>\r\n            {\r\n                robots.map(robot => {\r\n                    return <Card\r\n                        key={robot.id}\r\n                        id={robot.id}\r\n                        name={robot.name}\r\n                        email={robot.email}\r\n                    />\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchfield, searchChange }) => {\r\n    return (\r\n        <div className=\"pa2\">\r\n            <input \r\n                className=\"pa3 ba b--green bg-lightest-blue\"\r\n                type=\"search\" \r\n                placeholder=\"search robots\" \r\n                onChange={searchChange}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{overflowY: 'scroll', border: '5px solid black', height: '800px'}}>\r\n            {props.children}\r\n        </div>\r\n    )  \r\n}\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info){\r\n        this.setState({\r\n            hasError: true\r\n        })\r\n    }\r\n\r\n    render(){\r\n        if(this.state.hasError){\r\n            return <h1>Ooops. That is not good.</h1>\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\nimport { setSearchField, requestRobot } from '../action';\r\n\r\nclass App extends React.Component {\r\n    componentDidMount() {\r\n        this.props.onRequestRobot();\r\n    }\r\n    \r\n    render(){\r\n        const { searchField, searchHandler, robots, isPending} = this.props;\r\n        const filteredRobots = robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase())\r\n        })\r\n        return isPending ? <p>loading</p> : (\r\n            <div className=\"tc\">\r\n                <h1>RoboFriends</h1>\r\n                <SearchBox searchChange={searchHandler} />\r\n                <Scroll>\r\n                    <ErrorBoundry>\r\n                        <CardList robots={filteredRobots} />\r\n                    </ErrorBoundry>\r\n                </Scroll>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        searchField: state.search.searchField,\r\n        robots: state.robot.robots,\r\n        isPending: state.robot.isPending,\r\n        error: state.robot.error\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        searchHandler: (e) => dispatch(setSearchField(e.target.value)),\r\n        onRequestRobot: () => dispatch(requestRobot())\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOT_START,\r\n    REQUEST_ROBOT_SUCCESS,\r\n    REQUEST_ROBOT_FAIL\r\n} from './actionTypes';\r\n\r\nexport const setSearchField = (text) => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n})\r\n\r\nexport const requestRobot = () => (dispatch) => {\r\n    dispatch({type: REQUEST_ROBOT_START});\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(res => res.json())\r\n    .then(data => dispatch({type: REQUEST_ROBOT_SUCCESS, payload: data}))\r\n    .catch(error => dispatch({type: REQUEST_ROBOT_FAIL, payload: error}))\r\n}","export const CHANGE_SEARCH_FIELD = \"CHANGE_SEARCH_FIELD\";\r\n\r\nexport const REQUEST_ROBOT_START = \"REQUEST_ROBOT_START\";\r\nexport const REQUEST_ROBOT_SUCCESS = \"REQUEST_ROBOT_SUCCESS\";\r\nexport const REQUEST_ROBOT_FAIL = \"REQUEST_ROBOT_FAIL\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { applyMiddleware, createStore } from 'redux';\nimport logger from 'redux-logger';\nimport thunk from 'redux-thunk';\nimport { combineReducers } from 'redux';\nimport { searchRobot, requestRobotReducer } from './actionReducers';\nimport './index.css';\nimport 'tachyons';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nconst rootReducer = combineReducers({\n  search: searchRobot,\n  robot: requestRobotReducer\n});\nconst store = createStore(rootReducer, applyMiddleware(thunk, logger));\n\nReactDOM.render(\n  <Provider store={store} >\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}